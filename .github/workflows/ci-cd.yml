name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests
      run: ./gradlew test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/test-results/test/

  build-and-deploy:
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build application
      run: ./gradlew build -x test

    - name: Stop existing application
      run: |
        PID=$(pgrep -f "lv2-final-mission" || echo "")
        if [ ! -z "$PID" ]; then
          echo "Stopping existing application with PID: $PID"
          kill -15 $PID
          sleep 10
          if kill -0 $PID 2>/dev/null; then
            echo "Forcefully killing application"
            kill -9 $PID
          fi
        else
          echo "No existing application found"
        fi

    - name: Start Docker Compose
      run: |
        docker compose down || true
        docker compose up -d

    - name: Wait for MySQL to be ready
      run: |
        echo "Waiting for MySQL to be ready..."
        while ! docker exec lv2-final-mission-mysql mysqladmin ping -h"localhost" --silent; do
          echo "MySQL is not ready yet, waiting..."
          sleep 5
        done
        echo "MySQL is ready!"

    - name: Deploy application
      run: |
        cd build/libs
        nohup java -jar -Dspring.profiles.active=prod *.jar > /dev/null 2>&1 &
        echo "Application deployed successfully"

    - name: Health check
      run: |
        sleep 20
        curl -f http://localhost:8080/actuator/health || echo "Health check failed, but continuing..."
